{"version":3,"sources":["assets/images/tile1.png","assets/images/tile2.png","assets/images/tile3.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","slideOneText","setState","slideText","slideTwoText","slideThreeText","state","react_default","a","createElement","className","id","src","tile1","alt","tile2","tile3","href","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qRCiDzBC,qBA1Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,aAAe,WACbP,EAAKQ,SAAS,CAAEC,UAAW,oEARVT,EAWnBU,aAAe,WACbV,EAAKQ,SAAS,CAAEC,UAAW,2CAZVT,EAenBW,eAAiB,WACfX,EAAKQ,SAAS,CAAEC,UAAW,oDAd3BT,EAAKY,MAAQ,CACXH,UAAW,kEAHIT,wEAoBjB,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WACNJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAAOC,IAAI,WAEvBP,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WACNJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKG,IAAOD,IAAI,WAEvBP,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WACNJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKI,IAAOF,IAAI,YAGvBP,EAAAC,EAAAC,cAAA,KAAGE,GAAG,cAAcd,KAAKS,MAAMH,WAC/BI,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,WAAWC,QAASrB,KAAKI,cAAjC,KACAM,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,WAAWC,QAASrB,KAAKO,cAAjC,KACAG,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,WAAWC,QAASrB,KAAKQ,gBAAjC,aArCQc,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.129185ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tile1.c89ddaa3.png\";","module.exports = __webpack_public_path__ + \"static/media/tile2.815b26f6.png\";","module.exports = __webpack_public_path__ + \"static/media/tile3.6550f820.png\";","import React, { Component } from 'react';\nimport tile1 from './assets/images/tile1.png';\nimport tile2 from './assets/images/tile2.png';\nimport tile3 from './assets/images/tile3.png';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      slideText: 'Check-in to the table and browse the menu to place your order.',\n    };\n  }\n\n  slideOneText = () => {\n    this.setState({ slideText: 'Check-in to the table and browse the menu to place your order.'});\n  }\n\n  slideTwoText = () => {\n    this.setState({ slideText: 'View the app by scanning the NFC tag.'});\n  }\n\n  slideThreeText = () => {\n    this.setState({ slideText: 'Enjoy the food and pay via the app when ready!'});\n  }\n\n  render() {\n    return (\n      <div className=\"slider\">\n        <div className=\"slides\">\n          <div id=\"slide-1\">\n            <img src={tile1} alt=\"logo1\"/>\n          </div>\n          <div id=\"slide-2\">\n            <img src={tile2} alt=\"logo2\"/>\n          </div>\n          <div id=\"slide-3\">\n            <img src={tile3} alt=\"logo3\"/>\n          </div>\n        </div>\n          <p id=\"white-text\">{this.state.slideText}</p>\n          <a href=\"#slide-1\" onClick={this.slideOneText}>1</a>\n          <a href=\"#slide-2\" onClick={this.slideTwoText}>2</a>\n          <a href=\"#slide-3\" onClick={this.slideThreeText}>3</a>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}